#! /usr/bin/env nix-shell
#! nix-shell -i "just --justfile" --quiet
#! nix-shell -p just zsh nh git jq sshpass deploy-rs ssh-to-age nix-output-monitor watchexec sops yq-go curl
# vi: set syntax=just:
set shell := ["zsh", "-cu"]
set script-interpreter := ["zsh", "-u"]
set unstable
set export

SOPS_FILE := "secrets.yml"
SSHPASS:="toor"

alias rebuild := switch
alias b := switch
alias s := status
alias c := check
alias h := history
alias p := provision
alias d := deploy
alias u := update

_default: update stage fmt check switch deploy

# Show help
help:
    @just --list --justfile {{ justfile() }}

# Start lazygit
git:
    lazygit

# Spawn shell with tools
shell:
    nix develop .

# Format nix files
fmt:
    nix fmt .

# Update flake
update:
    nix flake update -v -L --commit-lock-file --log-format internal-json |& nom --json

# Set up automatic LUKS unlock
[script]
cryptenroll device="/dev/nvme0n1p2":
  set -euxo pipefail
  pcrs=7+11
  sudo systemd-cryptenroll --wipe-slot=tpm2 $device
  sudo systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=$pcrs $device

# Rekey secrets
rekey:
    sops updatekeys -y $SOPS_FILE

# Edit secrets
secrets: && rekey
    sops $SOPS_FILE

# Retrieve age key for specified host and update .sops.yaml
[script]
getkey *HOSTS: && rekey
    for host in {{HOSTS}}; do;
        COUNT=0; 
        until ssh -o StrictHostKeyChecking=accept-new root@$host exit 0;  do sleep 1; done
        key=$(ssh-keyscan -qt ssh-ed25519 $host | ssh-to-age)
        if [[ -z $key ]]; then
            echo "No key found for $host"
            continue
        fi
        keyname=$(echo $host | cut -d'.' -f1)
        echo $keyname $key
        if [[ -n $(yq ".keys[] | select(anchor == \"$keyname\")" ".sops.yaml") ]]; then
            yq -i "(.keys[] | select(anchor == \"$keyname\")) = \"$key\"" ".sops.yaml"
        else
            yq -i ".keys += [\"$key\"] | .keys[-1] anchor = \"$keyname\"" ".sops.yaml"
        fi
    done

# Deploy configuration to defined hosts
deploy *args:
    nix run -v -L --log-format bar-with-logs .#deploy -- -s {{args}} # we can skip checks here since they already run in the check command

# Deploy without automatic rollback
unsafe_deploy host:
    nixos-rebuild --flake ".#{{host}}" --build-host root@{{host}}.lan --target-host root@{{host}}.lan switch --use-remote-sudo -v --log-format internal-json |& nom --json

# Build a bootable ISO
build_iso:
    nom build --no-link ".#installer-iso"
    echo $(nix build --print-out-paths --no-link ".#installer-iso")

# Generate network diagram
diagram: check
    nom build .#diagram

[private]
[script]
post_talos credentials="":
    set -euxo pipefail
    until ssh -o StrictHostKeyChecking=accept-new root@talos.lan exit 0; do sleep 1; done
    radarr_api_key=$(curl --fail -s http://{{credentials}}@radarr.talos.lan/initialize.json | jq -r .apiKey)
    sonarr_api_key=$(curl --fail -s http://{{credentials}}@sonarr.talos.lan/initialize.json | jq -r .apiKey)
    prowlarr_api_key=$(curl --fail -s http://{{credentials}}@prowlarr.talos.lan/initialize.json | jq -r .apiKey)
    [[ -n "$radarr_api_key "]] || exit 1
    [[ -n "$sonarr_api_key"]] || exit 1
    [[ -n "$prowlarr_api_key" ]] || exit 1
    sops set secrets.yml '["radarr_api_key"]' \"$radarr_api_key\"
    sops set secrets.yml '["sonarr_api_key"]' \"$sonarr_api_key\"
    sops set secrets.yml '["prowlarr_api_key"]' \"$prowlarr_api_key\"
    nix run . -- -s .#talos


# Provision a host
provision flake host="nixos-installer.lan": check
    nix flake lock -v
    -ssh-keygen -R {{host}}
    -ssh-keygen -R {{flake}}.lan
    until ssh -o StrictHostKeyChecking=accept-new root@{{host}} exit 0; do sleep 1; done
    nix run github:nix-community/nixos-anywhere -- \
        --ssh-option StrictHostKeyChecking=accept-new -L --env-password --flake .#{{flake}} \
        --generate-hardware-config nixos-facter outputs/hosts/{{flake}}/facter.json \
        root@{{host}}
    -ssh-keygen -R {{host}}
    just --justfile {{ justfile() }} getkey {{flake}}.lan
    just --justfile {{ justfile() }} deploy .#{{flake}}
    just --justfile {{ justfile() }} --dump --dump-format=json | \
        jq -re .recipes.post_{{flake}} > /dev/null && \
        echo Running post-recipe for {{flake}} && \
        just --justfile {{ justfile() }} post_{{flake}}

# Build and switch
switch *args: check status && archive
    nh os switch {{args}} -- -j auto

# Stage all .nix files
stage:
    git add **/*.nix

# Flake check
check: fmt stage
    nix flake check --verbose -L

# Archive flake inputs
fix: && switch
    nix-collect-garbage -d
    nix-store --verify --check-contents --repair
    nix store verify --all --log-format bar-with-logs --repair --refresh

# Show profile history
history:
    nix profile history --profile /nix/var/nix/profiles/system


# Clean nix-store and all old generations
[confirm]
gca:
    nh clean all
    nix store optimise
    git reflog expire --expire=now --all
    git gc --prune=now --aggressive
    
# Clean nix-store and old generations (keep 10 or 1 week)
gc:
    nh clean all -k 10 -K 1w
    sudo /run/current-system/bin/switch-to-configuration boot
    nix store optimise
    git reflog expire --expire=now --all
    git gc --prune=now --aggressive

# Git status
status:
    -git diff -U0 $(nixos-version --configuration-revision).. -- ':(exclude)*.lock'
    git status -s --renames

# Archive flake inputs
archive:
    nix flake archive -L --verbose
